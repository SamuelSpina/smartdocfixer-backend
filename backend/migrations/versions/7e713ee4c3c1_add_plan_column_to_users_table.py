"""Add plan column to users table

Revision ID: 7e713ee4c3c1
Revises: 
Create Date: 2025-07-24 16:21:01.838471

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7e713ee4c3c1'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_usage_tracking_id'), table_name='usage_tracking')
    op.drop_table('usage_tracking')
    op.add_column('users', sa.Column('plan', sa.String(length=50), nullable=False, server_default='free'))
    op.add_column('users', sa.Column('stripe_customer_id', sa.String(), nullable=True))
    op.create_unique_constraint(None, 'users', ['stripe_customer_id'])
    op.drop_column('users', 'is_pro')
    op.drop_column('users', 'registered_date')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('registered_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('is_pro', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_column('users', 'stripe_customer_id')
    op.drop_column('users', 'plan')
    op.create_table('usage_tracking',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('file_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('processed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('usage_tracking_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('usage_tracking_pkey'))
    )
    op.create_index(op.f('ix_usage_tracking_id'), 'usage_tracking', ['id'], unique=False)
    # ### end Alembic commands ###
